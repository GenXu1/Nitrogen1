keepGene <- rowSums(edgeR::cpm(ct)>0) >=4 ##Filtering. Only keep in the analysis those genes which had > 0 reads per million mapped reads in at least two libraries.
table(keepGene);dim(ct)
dim(ct[keepGene,])
ct <- ct[keepGene,]
rownames(ct) <- geneLists[keepGene]
(colData <- data.frame(row.names=colnames(ct), treatment=treatment,genotype=genotype,pop=pop) )
### ??????DESeqDataSet??????
# ?????????????????????????????????????????????????????????????????????????????????????????????:
dds <- DESeqDataSetFromMatrix(countData = ct,
colData = colData,
design = ~ treatment+pop+treatment:pop)
dds <- DESeq(dds)
resultsNames(dds)
res <- results(dds, name="treatment_LN_vs_HN")
res1=results(dds, contrast=c("treatment","LN","HN"))
View(res)
res <- res[order(res$padj),]
head(res)
res1 <- res1[order(res1$padj),]
write.csv(res,"HN_LN_Leaf.csv",quote = F,row.names = T)
write.csv(res1,"HN_LN_Leaf2.csv",quote = F,row.names = T)
resultsNames(dds)
res <- results(dds, name="pop_OLD_vs_NEW")
res <- res[order(res$padj),]
write.csv(res,"pop_OLD_vs_NEW_Leaf.csv",quote = F,row.names = T)
res <- results(dds, name="treatmentLN.popOLD")
res <- res[order(res$padj),]
write.csv(res,"pop_Interact_treatment_Leaf.csv",quote = F,row.names = T)
dds <- DESeqDataSetFromMatrix(countData = ct,
colData = colData,
design = ~ genotype+treatment+genotype:treatment)
dds <- DESeq(dds)
resultsNames(dds)
res <- results(dds, name="treatment_LN_vs_HN")
res <- res[order(res$padj),]
write.csv(res,"HN_LN_Leaf_from_G_T.csv",quote = F,row.names = T)
View(group_info)
View(g_leaf)
setwd("E:/UNL_Yang_lab/N_treatment_Jing/08_RNA_SEQ/N_treatment_Four_lines/04DEG/pop_treatment_DEG")
library("data.table")
library(Ropt)
f=list.files(path = ".",pattern = "csv")
for(i in f)
{
out=gsub("csv","q001.fd2sig.txt",i)
d=fread(i,header = T,sep=",",data.table=F)
d1=d[d[,7]<0.01 & abs(d[,3])>1,]
d1=na.omit(d1)
colnames(d1)[1]=c("Gene")
write.table(d1,file=out,row.names = F,col.na=T,quote = F,sep="\t")
}
setwd("E:/UNL_Yang_lab/N_treatment_Jing/08_RNA_SEQ/N_treatment_Four_lines/04DEG")
##http://www.bioconductor.org/packages/devel/bioc/vignettes/DESeq2/inst/doc/DESeq2.html
############????????????????????????#############################
ct=fread("counts.txt",head=T,data.table=F,skip=1)
ct[,1]=gsub("gene:","",ct[,1])
rownames(ct)=ct[,1]
ct=ct[,-c(1:6)]
group_info <- read.table("group_info.txt", stringsAsFactors = F, header = T)
g_Root=group_info[group_info[,4]=="Root",]
ct_r=ct[,g_Root[,7]]
ct=ct_r
treatment <- factor(g_Root[,5])
genotype <- factor(g_Root[,3])
pop<-factor(g_Root[,6])
geneLists <-  row.names(ct)
# ????????????
keepGene <- rowSums(edgeR::cpm(ct)>0) >=4 ##Filtering. Only keep in the analysis those genes which had > 0 reads per million mapped reads in at least two libraries.
table(keepGene);dim(ct)
dim(ct[keepGene,])
ct <- ct[keepGene,]
rownames(ct) <- geneLists[keepGene]
(colData <- data.frame(row.names=colnames(ct), treatment=treatment,genotype=genotype,pop=pop) )
View(g_Root)
### ??????DESeqDataSet??????
# ?????????????????????????????????????????????????????????????????????????????????????????????:
dds <- DESeqDataSetFromMatrix(countData = ct,
colData = colData,
design = ~ treatment+pop+treatment:pop)
dds <- DESeq(dds)
resultsNames(dds)
res <- results(dds, name="treatment_LN_vs_HN")
res <- res[order(res$padj),]
write.csv(res,"HN_LN_Root.csv",quote = F,row.names = T)
res <- results(dds, name="pop_OLD_vs_NEW")
res <- res[order(res$padj),]
write.csv(res,"pop_OLD_vs_NEW_Root.csv",quote = F,row.names = T)
res <- results(dds, name="treatmentLN.popOLD")
res <- res[order(res$padj),]
write.csv(res,"pop_Interact_treatment_Root.csv",quote = F,row.names = T)
library("data.table")
library(Ropt)
f=list.files(path = ".",pattern = "csv")
for(i in f)
{
out=gsub("csv","q001.fd2sig.txt",i)
d=fread(i,header = T,sep=",",data.table=F)
d1=d[d[,7]<0.01 & abs(d[,3])>1,]
d1=na.omit(d1)
colnames(d1)[1]=c("Gene")
write.table(d1,file=out,row.names = F,col.na=T,quote = F,sep="\t")
}
setwd("E:/UNL_Yang_lab/N_treatment_Jing/08_RNA_SEQ/N_treatment_Four_lines/04DEG/pop_treatment_DEG")
library("data.table")
library(Ropt)
f=list.files(path = ".",pattern = "csv")
for(i in f)
{
out=gsub("csv","q001.fd2sig.txt",i)
d=fread(i,header = T,sep=",",data.table=F)
d1=d[d[,7]<0.01 & abs(d[,3])>1,]
d1=na.omit(d1)
colnames(d1)[1]=c("Gene")
write.table(d1,file=out,row.names = F,col.na=T,quote = F,sep="\t")
}
setwd("E:/UNL_Yang_lab/N_treatment_Jing/08_RNA_SEQ/N_treatment_Four_lines/04DEG/pop_treatment_DEG")
#https://guangchuangyu.github.io/cn/2017/07/clusterprofiler-maize/
#http://yulab-smu.top/clusterProfiler-book/chapter14.html#bitr
#https://ftp.ncbi.nlm.nih.gov/gene/DATA/
##TF  http://planttfdb.gao-lab.org/index.php?sp=Zma
library(rtracklayer)
require(clusterProfiler)
library(data.table)
library(Ropt)
require(AnnotationHub)
d0=fread("Zea_mays.gene_info",head=T,data.table=F)[,2:5]
colnames(d0)[3]="Gene"
hub <- AnnotationHub()
query(hub, "zea")
maize <- hub[['AH85440']]
list.files(path=".",pattern = "sig.txt")
f=list.files(path=".",pattern = "sig.txt")
i=f[1]
out=gsub("q001.fd2sig.","",i)
d=fread(i,head=T,data.table=F,sep="\t")
d1=merge(d,d0,by="Gene")
View(d1)
View(d1)
for(i in f)##DESeq2_DEG_HN_Leaf_NEW_Old_results2.q001.fd2sig.txt
{
out=gsub("q001.fd2sig.","",i)
d=fread(i,head=T,data.table=F,sep="\t")
d1=merge(d,d0,by="Gene")
write.table(d1,out,quote=F,sep="\t",col.names = T,row.names = F)
g=d1[,8]
res = enrichGO(g, OrgDb=maize,pvalueCutoff = 1, pAdjustMethod = "BH",qvalueCutoff=1,ont ="MF",readable=T)
result=res@result
res1=result[result[,5]<=0.05,]
out1=gsub("q001.fd2sig.","sig.GO.",i)
if(nrow(res1)>1){
write.table(res1,out1,quote=F,sep="\t",col.names = T,row.names = F)
}
out2=gsub("q001.fd2sig.txt","sig.GO.png",i)
png(out2,res=600,units = "mm",height = 110,width = 210)
par(mfrow=c(1,1),mar=c(4,4,1,1))
#barplot(res, showCategory = 10,drop=T)
dotplot(res, showCategory = 10)
dev.off()
}
f
i=f[5]
out=gsub("q001.fd2sig.","",i)
d=fread(i,head=T,data.table=F,sep="\t")
View(d)
d1=merge(d,d0,by="Gene")
out
write.table(d1,out,quote=F,sep="\t",col.names = T,row.names = F)
g=d1[,8]
res = enrichGO(g, OrgDb=maize,pvalueCutoff = 1, pAdjustMethod = "BH",qvalueCutoff=1,ont ="MF",readable=T)
result=res@result
res1=result[result[,5]<=0.05,]
out1=gsub("q001.fd2sig.","sig.GO.",i)
if(nrow(res1)>1){
write.table(res1,out1,quote=F,sep="\t",col.names = T,row.names = F)
}
out2=gsub("q001.fd2sig.txt","sig.GO.png",i)
#barplot(res, showCategory = 10,drop=T)
dotplot(res, showCategory = 10)
out2=gsub("q001.fd2sig.txt","sig.GO.png",i)
png(out2,res=600,units = "mm",height = 110,width = 210)
par(mfrow=c(1,1),mar=c(4,4,1,1))
#barplot(res, showCategory = 10,drop=T)
dotplot(res, showCategory = 10)
dev.off()
i=f[6]
out=gsub("q001.fd2sig.","",i)
d=fread(i,head=T,data.table=F,sep="\t")
d1=merge(d,d0,by="Gene")
write.table(d1,out,quote=F,sep="\t",col.names = T,row.names = F)
g=d1[,8]
res = enrichGO(g, OrgDb=maize,pvalueCutoff = 1, pAdjustMethod = "BH",qvalueCutoff=1,ont ="MF",readable=T)
result=res@result
res1=result[result[,5]<=0.05,]
out1=gsub("q001.fd2sig.","sig.GO.",i)
if(nrow(res1)>1){
write.table(res1,out1,quote=F,sep="\t",col.names = T,row.names = F)
}
out2=gsub("q001.fd2sig.txt","sig.GO.png",i)
png(out2,res=600,units = "mm",height = 110,width = 210)
par(mfrow=c(1,1),mar=c(4,4,1,1))
#barplot(res, showCategory = 10,drop=T)
dotplot(res, showCategory = 10)
dev.off()
#barplot(res, showCategory = 10,drop=T)
dotplot(res, showCategory = 10)
png(out2,res=600,units = "mm",height = 110,width = 310)
par(mfrow=c(1,1),mar=c(4,4,1,1))
#barplot(res, showCategory = 10,drop=T)
dotplot(res, showCategory = 10)
dev.off()
i=f[1]
out=gsub("q001.fd2sig.","",i)
d=fread(i,head=T,data.table=F,sep="\t")
d1=merge(d,d0,by="Gene")
g=d1[,8]
res = enrichGO(g, OrgDb=maize,pvalueCutoff = 1, pAdjustMethod = "BH",qvalueCutoff=1,ont ="MF",readable=T)
result=res@result
res1=result[result[,5]<=0.05,]
out1=gsub("q001.fd2sig.","sig.GO.",i)
out2=gsub("q001.fd2sig.txt","sig.GO.png",i)
#barplot(res, showCategory = 10,drop=T)
dotplot(res, showCategory = 10)
png(out2,res=600,units = "mm",height = 110,width = 210)
par(mfrow=c(1,1),mar=c(4,4,1,1))
#barplot(res, showCategory = 10,drop=T)
dotplot(res, showCategory = 10)
dev.off()
i=f[2]
out=gsub("q001.fd2sig.","",i)
d=fread(i,head=T,data.table=F,sep="\t")
d1=merge(d,d0,by="Gene")
write.table(d1,out,quote=F,sep="\t",col.names = T,row.names = F)
g=d1[,8]
res = enrichGO(g, OrgDb=maize,pvalueCutoff = 1, pAdjustMethod = "BH",qvalueCutoff=1,ont ="MF",readable=T)
result=res@result
res1=result[result[,5]<=0.05,]
out1=gsub("q001.fd2sig.","sig.GO.",i)
if(nrow(res1)>1){
write.table(res1,out1,quote=F,sep="\t",col.names = T,row.names = F)
}
out2=gsub("q001.fd2sig.txt","sig.GO.png",i)
png(out2,res=600,units = "mm",height = 110,width = 210)
par(mfrow=c(1,1),mar=c(4,4,1,1))
#barplot(res, showCategory = 10,drop=T)
dotplot(res, showCategory = 10)
dev.off()
png(out2,res=600,units = "mm",height = 110,width = 310)
par(mfrow=c(1,1),mar=c(4,4,1,1))
#barplot(res, showCategory = 10,drop=T)
dotplot(res, showCategory = 10)
dev.off()
i=f[3]
out=gsub("q001.fd2sig.","",i)
d=fread(i,head=T,data.table=F,sep="\t")
d1=merge(d,d0,by="Gene")
write.table(d1,out,quote=F,sep="\t",col.names = T,row.names = F)
g=d1[,8]
res = enrichGO(g, OrgDb=maize,pvalueCutoff = 1, pAdjustMethod = "BH",qvalueCutoff=1,ont ="MF",readable=T)
result=res@result
res1=result[result[,5]<=0.05,]
out1=gsub("q001.fd2sig.","sig.GO.",i)
if(nrow(res1)>1){
write.table(res1,out1,quote=F,sep="\t",col.names = T,row.names = F)
}
out2=gsub("q001.fd2sig.txt","sig.GO.png",i)
png(out2,res=600,units = "mm",height = 110,width = 210)
par(mfrow=c(1,1),mar=c(4,4,1,1))
#barplot(res, showCategory = 10,drop=T)
dotplot(res, showCategory = 10)
dev.off()
i=f[4]
out=gsub("q001.fd2sig.","",i)
d=fread(i,head=T,data.table=F,sep="\t")
d1=merge(d,d0,by="Gene")
write.table(d1,out,quote=F,sep="\t",col.names = T,row.names = F)
g=d1[,8]
res = enrichGO(g, OrgDb=maize,pvalueCutoff = 1, pAdjustMethod = "BH",qvalueCutoff=1,ont ="MF",readable=T)
result=res@result
res1=result[result[,5]<=0.05,]
out1=gsub("q001.fd2sig.","sig.GO.",i)
if(nrow(res1)>1){
write.table(res1,out1,quote=F,sep="\t",col.names = T,row.names = F)
}
out2=gsub("q001.fd2sig.txt","sig.GO.png",i)
png(out2,res=600,units = "mm",height = 110,width = 210)
par(mfrow=c(1,1),mar=c(4,4,1,1))
#barplot(res, showCategory = 10,drop=T)
dotplot(res, showCategory = 10)
dev.off()
i
library(data.table)
library(Ropt)
d=fread("HN_LN_Leaf.q001.fd2sig.txt", header=T,data.table=F)
head(d)
d1=fread("HN_LN_Leaf.q001.fd2sig.txt", header=T,data.table=F)
d2=fread("pop_OLD_vs_NEW_Leaf.q001.fd2sig.txt", header=T,data.table=F)
d3=fread("HN_LN_Root.q001.fd2sig.txt", header=T,data.table=F)
d4=fread("pop_OLD_vs_NEW_Root.q001.fd2sig.txt", header=T,data.table=F)
library(data.table)
library(Ropt)
library(VennDiagram)
install.packages("VennDiagram")
library(VennDiagram)
HN_LN_L=d1[,1]
HN_LN_R=d3[,1]
Old_New_L=d2[,1]
Old_New_R=d4[,1]
T <- venn.diagram(list(A = HN_LN_L, B = HN_LN_R, C = Old_New_L, D = Old_New_R), filename = NULL, lwd = 1, lty = 2,
col = c("red", "green", "blue","darkorange"), fill = c("red", "green", "blue","darkorange"), cat.col = c("red",
"green", "blue",,"darkorange"), reverse = TRUE)
T <- venn.diagram(list(A = HN_LN_L, B = HN_LN_R, C = Old_New_L, D = Old_New_R), filename = NULL, lwd = 1, lty = 2,
col = c("red", "green", "blue","darkorange"), fill = c("red", "green", "blue","darkorange"), cat.col = c("red",
"green", "blue","darkorange"), reverse = TRUE)
grid.draw(T)
tiff("DEGs_venn.tiff",res=600,units = "mm",height = 120,width = 150)
par(mar=c(4,4,2,2),mfrow=c(1,1))
grid.newpage()
T <- venn.diagram(list(A = HN_LN_L, B = HN_LN_R, C = Old_New_L, D = Old_New_R), filename = NULL, lwd = 1, lty = 2,
col = c("red", "green", "blue","darkorange"), fill = c("red", "green", "blue","darkorange"), cat.col = c("red",
"green", "blue","darkorange"), reverse = TRUE)
grid.draw(T)
dev.off()
setwd("E:/UNL_Yang_lab/N_treatment_Jing/08_RNA_SEQ/N_treatment_Four_lines/04DEG/pop_treatment_DEG")
f=list.files(path = ".",pattern = "sig.txt")
f
f=list.files(path = ".",pattern = "sig.txt")
f=list.files(path = ".",pattern = "sig.txt")
F
f
i=f[1]
na=gsub(".q001.fd2sig.txt","",i)
d=fread(i,header = T,sep=",",data.table=F)
d=fread(i,header = T,sep="\t",data.table=F)
head(d)
re=NULL
for(i in f)
{
na=gsub(".q001.fd2sig.txt","",i)
d=fread(i,header = T,sep="\t",data.table=F)
total=nrow(d);up=nrow(d[d[,3]>0,]);down=nrow(d[d[,3]<0,]);
r=c(i,total,up,down)
re=rbind(re,r)
}
re
re=NULL
for(i in f)
{
na=gsub(".q001.fd2sig.txt","",i)
d=fread(i,header = T,sep="\t",data.table=F)
total=nrow(d);up=nrow(d[d[,3]>0,]);down=nrow(d[d[,3]<0,]);
r=c(na,total,up,down)
re=rbind(re,r)
}
colnames(re)=c("Comparison","Total_DEGs","Up","Down")
write.table(re,file="Summary_DEGs.txt",row.names = F,col.na=T,quote = F,sep="\t")
setwd("E:/UNL_Yang_lab/N_treatment_Jing/08_RNA_SEQ/N_treatment_Four_lines/04DEG/pop_treatment_DEG/Mapman")
setwd("E:/UNL_Yang_lab/N_treatment_Jing/08_RNA_SEQ/N_treatment_Four_lines/04DEG/pop_treatment_DEG/Mapman")
f=list.files(path = ".",pattern = "sig.txt")
g=fread("v3_V4_gene.txt",header = T,sep="\t",data.table=F)
View(g)
g=fread("v3_V4_gene.txt",header = T,sep="\t",data.table=F)
f=list.files(path = ".",pattern = "sig.txt")
i=f[1]
na=gsub(".q001.fd2sig.txt","",i)
d=fread(i,header = T,sep="\t",data.table=F)
g1=merge(g,d,by="Gene")
View(g1)
colnames(g1)
g2=g1[,c(2,4)]
head(g2)
g2[,2]=2^g2[,2]
head(g2)
g2=g1[,c(2,4)]
t=ifelse(g2[,2]>0,1,-1)
g2[,2]=2^abs(g2[,2])
g2[,2]=g2[,2]*t
head(g2)
na
g=fread("v3_V4_gene.txt",header = T,sep="\t",data.table=F)
f=list.files(path = ".",pattern = "sig.txt")
for(i in f)
{
na=gsub(".q001.fd2sig.txt","",i)
d=fread(i,header = T,sep="\t",data.table=F)
g1=merge(g,d,by="Gene")
g2=g1[,c(2,4)]
t=ifelse(g2[,2]>0,1,-1)
g2[,2]=2^abs(g2[,2])
g2[,2]=g2[,2]*t
colnames(g2)=c("Gene","Fd")
out=qq("{na}.mapman.txt")
}
write.table(g2,file=out,row.names = F,col.na=T,quote = F,sep="\t")
g=fread("v3_V4_gene.txt",header = T,sep="\t",data.table=F)
f=list.files(path = ".",pattern = "sig.txt")
for(i in f)
{
na=gsub(".q001.fd2sig.txt","",i)
d=fread(i,header = T,sep="\t",data.table=F)
g1=merge(g,d,by="Gene")
g2=g1[,c(2,4)]
t=ifelse(g2[,2]>0,1,-1)
g2[,2]=2^abs(g2[,2])
g2[,2]=g2[,2]*t
colnames(g2)=c("Gene","Fd")
out=qq("{na}.mapman.txt")
write.table(g2,file=out,row.names = F,col.na=T,quote = F,sep="\t")
}
library(data.table)
library(Ropt)
library(DESeq2)
library(edgeR)
library(pheatmap)
library("RColorBrewer")
##http://www.bioconductor.org/packages/devel/bioc/vignettes/DESeq2/inst/doc/DESeq2.html
############????????????????????????#############################
ct=fread("counts.txt",head=T,data.table=F,skip=1)
ct[,1]=gsub("gene:","",ct[,1])
rownames(ct)=ct[,1]
ct=ct[,-c(1:6)]
setwd("E:/UNL_Yang_lab/N_treatment_Jing/08_RNA_SEQ/N_treatment_Four_lines/04DEG/pop_treatment_DEG2")
##http://www.bioconductor.org/packages/devel/bioc/vignettes/DESeq2/inst/doc/DESeq2.html
############????????????????????????#############################
ct=fread("counts.txt",head=T,data.table=F,skip=1)
ct[,1]=gsub("gene:","",ct[,1])
rownames(ct)=ct[,1]
ct=ct[,-c(1:6)]
group_info <- read.table("group_info.txt", stringsAsFactors = F, header = T)
g_leaf=group_info[group_info[,4]=="Leaf",]
ct_l=ct[,g_leaf[,7]]
ct=ct_l
treatment <- factor(g_leaf[,5])
genotype <- factor(g_leaf[,3])
pop<-factor(g_leaf[,6])
geneLists <-  row.names(ct)
# ????????????
keepGene <- rowSums(edgeR::cpm(ct)>0) >=4 ##Filtering. Only keep in the analysis those genes which had > 0 reads per million mapped reads in at least two libraries.
table(keepGene);dim(ct)
dim(ct[keepGene,])
ct <- ct[keepGene,]
rownames(ct) <- geneLists[keepGene]
(colData <- data.frame(row.names=colnames(ct), treatment=treatment,genotype=genotype,pop=pop) )
### ??????DESeqDataSet??????
# ?????????????????????????????????????????????????????????????????????????????????????????????:
dds <- DESeqDataSetFromMatrix(countData = ct,
colData = colData,
design = ~ treatment+pop)
dds <- DESeq(dds)
resultsNames(dds)
res <- results(dds, name="treatment_LN_vs_HN")
res <- res[order(res$padj),]
write.csv(res,"HN_LN_Leaf.csv",quote = F,row.names = T)
res <- results(dds, name="pop_OLD_vs_NEW")
res <- res[order(res$padj),]
write.csv(res,"pop_OLD_vs_NEW_Leaf.csv",quote = F,row.names = T)
library(data.table)
library(Ropt)
library(DESeq2)
library(edgeR)
library(pheatmap)
library("RColorBrewer")
##http://www.bioconductor.org/packages/devel/bioc/vignettes/DESeq2/inst/doc/DESeq2.html
############????????????????????????#############################
ct=fread("counts.txt",head=T,data.table=F,skip=1)
ct[,1]=gsub("gene:","",ct[,1])
rownames(ct)=ct[,1]
ct=ct[,-c(1:6)]
group_info <- read.table("group_info.txt", stringsAsFactors = F, header = T)
g_Root=group_info[group_info[,4]=="Root",]
ct_r=ct[,g_Root[,7]]
ct=ct_r
treatment <- factor(g_Root[,5])
genotype <- factor(g_Root[,3])
pop<-factor(g_Root[,6])
geneLists <-  row.names(ct)
# ????????????
keepGene <- rowSums(edgeR::cpm(ct)>0) >=4 ##Filtering. Only keep in the analysis those genes which had > 0 reads per million mapped reads in at least two libraries.
table(keepGene);dim(ct)
dim(ct[keepGene,])
ct <- ct[keepGene,]
rownames(ct) <- geneLists[keepGene]
(colData <- data.frame(row.names=colnames(ct), treatment=treatment,genotype=genotype,pop=pop) )
### ??????DESeqDataSet??????
# ?????????????????????????????????????????????????????????????????????????????????????????????:
dds <- DESeqDataSetFromMatrix(countData = ct,
colData = colData,
design = ~ treatment+pop+treatment:pop)
### ??????DESeqDataSet??????
# ?????????????????????????????????????????????????????????????????????????????????????????????:
dds <- DESeqDataSetFromMatrix(countData = ct,
colData = colData,
design = ~ treatment+pop)
dds <- DESeq(dds)
resultsNames(dds)
res <- results(dds, name="treatment_LN_vs_HN")
res <- res[order(res$padj),]
write.csv(res,"HN_LN_Root.csv",quote = F,row.names = T)
res <- results(dds, name="pop_OLD_vs_NEW")
res <- res[order(res$padj),]
write.csv(res,"pop_OLD_vs_NEW_Root.csv",quote = F,row.names = T)
library("data.table")
library(Ropt)
f=list.files(path = ".",pattern = "csv")
for(i in f)
{
out=gsub("csv","q001.fd2sig.txt",i)
d=fread(i,header = T,sep=",",data.table=F)
d1=d[d[,7]<0.01 & abs(d[,3])>1,]
d1=na.omit(d1)
colnames(d1)[1]=c("Gene")
write.table(d1,file=out,row.names = F,col.na=T,quote = F,sep="\t")
}
